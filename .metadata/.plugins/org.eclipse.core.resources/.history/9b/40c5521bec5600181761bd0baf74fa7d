package com.papi.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

import com.papi.dao.GroupDao;
import com.papi.dao.UserDao;
import com.papi.entity.User;
import com.papi.utility.PWUtility;
import com.papi.wrapper.UserWrapper;

/**
 * 
 * @author pshet
 *
 */
@RestController
@RequestMapping("/user")
public class UserController {
	@Autowired
	UserDao userDao;
	@Autowired
	GroupDao groupDao;

	@RequestMapping(value = "/getUser/{id}", method = RequestMethod.GET, produces = "application/json")
	@ResponseBody
	public User method7(@PathVariable("id") Long id) {

		return userDao.getUser(id);
	}

	@RequestMapping(value = "/getUserList", method = RequestMethod.GET, produces = "application/json")
	@ResponseBody
	public List<User> getUserList() {
		System.out.println("GetUser");

		return userDao.getAllUsers();
	}

	@RequestMapping(value = "/getUserList/{groupId}", method = RequestMethod.GET, produces = "application/json")
	@ResponseBody
	public List<User> getUserListForGroup(@PathVariable("groupId") Long groupId) {
		System.out.println("getUserListForGroup");

		return userDao.getAllUsersForGroup(groupId);
	}

	@RequestMapping(value = "/addUser/{groupId}", method = RequestMethod.POST, consumes = "application/json")
	@ResponseBody
	public User addUser(@RequestBody User user, @PathVariable("groupId") Long groupId) throws Exception {
		System.out.println("add user");
		String username = PWUtility.generateUserName(user.getoEmail());
		String password = PWUtility.generateRandomPasswordForUser(username);
		user.setGroup_id(groupId);
		user.setUsername(username);
		user.setPassword(password);
		//user.setGroup(groupDao.getGroup(groupId));
		System.out.println(user);
		userDao.addUser(user);
		PWUtility.sendMail("Welcome to  Peakaboo", "Hi "+ user.getfName()+", \n\nYour Account is created with below details.\n\n username : "+username+"\n password : "+password+"\n\n Please login to peakaboo.com and update your profile with new password. \n\n\n Thank you.\n Peakaboo Team.", user.getoEmail());
		return user;
	}
	@RequestMapping(value = "/updateUser/{groupId}", method = RequestMethod.POST, consumes = "application/json")
	@ResponseBody
	public User addUser(@RequestBody User user, @PathVariable("groupId") Long groupId) throws Exception {
		System.out.println("add user");
		String username = PWUtility.generateUserName(user.getoEmail());
		String password = PWUtility.generateRandomPasswordForUser(username);
		user.setGroup_id(groupId);
		user.setUsername(username);
		user.setPassword(password);
		//user.setGroup(groupDao.getGroup(groupId));
		System.out.println(user);
		userDao.addUser(user);
		PWUtility.sendMail("Welcome to  Peakaboo", "Hi "+ user.getfName()+", \n\nYour Account is created with below details.\n\n username : "+username+"\n password : "+password+"\n\n Please login to peakaboo.com and update your profile with new password. \n\n\n Thank you.\n Peakaboo Team.", user.getoEmail());
		return user;
	}
	@RequestMapping(value = "/createAutoUsers/{groupId}", method = RequestMethod.POST, consumes = "application/json")
	@ResponseBody
	public void createAutoUsers( @RequestBody UserWrapper users, @PathVariable("groupId") Long groupId) throws Exception {
		System.out.println("createAutoUsers");
		List<User> userList = PWUtility.createUserFromUserEmail(users.getUser(), groupId);
		for(User user: userList){
			userDao.addUser(user);
			PWUtility.sendMail("Welcome to  Peakaboo", "Hi "+ user.getUsername()+", \n\nYour Account is created with below details.\n\n username : "+user.getUsername()+"\n password : "+user.getPassword()+"\n\n Please login to peakaboo.com and update your profile with new password. \n\n\n Thank you.\n Peakaboo Team.", user.getoEmail());
		}

	}
	@RequestMapping("*")
	@ResponseBody
	public String fallbackMethod() {
		return "Invalid URL : Please check Url";
	}
}
